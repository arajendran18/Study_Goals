import boto3
from datetime import datetime, timedelta

# Function to get active load balancers for Classic Load Balancers (CLBs) and Application/Network Load Balancers (ALBs/NLBs)
def get_active_load_balancers(region_name):
    # Initialize clients for Classic Load Balancers (CLBs) and ALBs/NLBs (elbv2)
    elb_client = boto3.client('elb', region_name=region_name)
    elbv2_client = boto3.client('elbv2', region_name=region_name)

    # Get Classic Load Balancers (CLBs)
    clb_response = elb_client.describe_load_balancers()
    clb_load_balancers = [
        lb['LoadBalancerName'] for lb in clb_response['LoadBalancerDescriptions']
    ]

    # Get Application/Network Load Balancers (ALBs/NLBs)
    elbv2_response = elbv2_client.describe_load_balancers()
    elbv2_load_balancers = [
        lb['LoadBalancerName'] for lb in elbv2_response['LoadBalancers']
        if lb['State']['Code'] == 'active'
    ]

    # Combine both types of load balancers
    active_load_balancers = clb_load_balancers + elbv2_load_balancers
    return active_load_balancers

# Function to get HTTP code metrics from CloudWatch
def get_http_code_count(start_time, end_time, load_balancer_name, metric_name, region_name):
    cloudwatch = boto3.client('cloudwatch', region_name=region_name)
    response = cloudwatch.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'http_code_query',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ELB',
                        'MetricName': metric_name,
                        'Dimensions': [
                            {'Name': 'LoadBalancerName', 'Value': load_balancer_name}
                        ]
                    },
                    'Period': 300,  # 5-minute interval
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        ScanBy='TimestampDescending'
    )
    
    # Sum up the values for all time periods
    total_count = 0
    for result in response['MetricDataResults']:
        if result['Id'] == 'http_code_query' and 'Values' in result:
            total_count += sum(result['Values'])

    return total_count

# Function to calculate availability based on 5XX and 2XX responses
def calculate_availability(total_5xx_errors, total_2xx_responses):
    # If there are no 2XX responses, availability is undefined, so return 0
    if total_2xx_responses == 0:
        return 0

    # Calculate the percentage of 5XX to 2XX
    percentage_5xx_of_2xx = (total_5xx_errors / total_2xx_responses) * 100
    
    # Subtract the 5XX percentage from 100 to get availability (with full precision)
    availability_percentage = 100 - percentage_5xx_of_2xx
    
    return availability_percentage

# Lambda handler function
def lambda_handler(event, context):
    # Query over a 30-day time range
    start_time = datetime.utcnow() - timedelta(days=30)
    end_time = datetime.utcnow()

    # Define the regions to check
    regions = ['us-east-1', 'us-west-2']  # Example: N. Virginia and Oregon regions
    results = {}

    for region in regions:
        load_balancer_names = get_active_load_balancers(region)
        results[region] = []

        for load_balancer_name in load_balancer_names:
            # Get the total 5XX and 2XX counts for the load balancer
            total_5xx_errors = get_http_code_count(start_time, end_time, load_balancer_name, 'HTTPCode_Backend_5XX', region)
            total_2xx_responses = get_http_code_count(start_time, end_time, load_balancer_name, 'HTTPCode_Backend_2XX', region)

            # Calculate the availability percentage
            availability_percentage = calculate_availability(total_5xx_errors, total_2xx_responses)

            # Append results for the load balancer
            results[region].append({
                "LoadBalancerName": load_balancer_name,
                "HTTPCode_Backend_5XX_Count": total_5xx_errors,
                "HTTPCode_Backend_2XX_Count": total_2xx_responses,
                "Availability_Percentage": f"{availability_percentage:.10f}%",  # 10 decimal places for accuracy
                "Message": f"The availability percentage based on user's request is {availability_percentage:.10f}%",
                "Summary": f"5XX Count: {total_5xx_errors}, 2XX Count: {total_2xx_responses}, Availability: {availability_percentage:.10f}%"
            })

    return {
        "statusCode": 200,
        "body": results
    }
