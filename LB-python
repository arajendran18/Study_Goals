import boto3
from datetime import datetime, timedelta

cloudwatch = boto3.client('cloudwatch')

# Fetching both 2XX and 5XX metrics in 5-minute intervals
def get_metrics(start_time, end_time, load_balancer_name):
    response = cloudwatch.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'http2xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_ELB_2XX_Count',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 300,  # 5-minute granularity
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http5xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_ELB_5XX_Count',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 300,  # 5-minute granularity
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        ScanBy='TimestampDescending'
    )
    return response

# Calculate total uptime and downtime from 2XX and 5XX responses
def calculate_uptime_downtime(metrics_data):
    # Extract 2XX and 5XX data points
    http2xx_data = next(item for item in metrics_data['MetricDataResults'] if item['Id'] == 'http2xx')
    http5xx_data = next(item for item in metrics_data['MetricDataResults'] if item['Id'] == 'http5xx')

    total_uptime_intervals = 0
    total_downtime_intervals = 0
    
    # Iterate over the data points
    for i in range(len(http2xx_data['Timestamps'])):
        # Get the 2XX and 5XX values for the same timestamp
        http2xx_value = http2xx_data['Values'][i] if i < len(http2xx_data['Values']) else 0
        http5xx_value = http5xx_data['Values'][i] if i < len(http5xx_data['Values']) else 0
        
        # Uptime: 2XX > 0 and 5XX == 0
        if http2xx_value > 0 and http5xx_value == 0:
            total_uptime_intervals += 1
        # Downtime: 5XX > 0
        elif http5xx_value > 0:
            total_downtime_intervals += 1

    # Calculate total uptime and downtime in minutes
    total_uptime_minutes = total_uptime_intervals * 5  # Each interval is 5 minutes
    total_downtime_minutes = total_downtime_intervals * 5

    return total_uptime_minutes, total_downtime_minutes

# Lambda handler
def lambda_handler(event, context):
    start_time = datetime.utcnow() - timedelta(days=30)  # Past 30 days
    end_time = datetime.utcnow()
    load_balancer_name = event['load_balancer_name']  # Pass load balancer name via event

    # Fetch metrics
    metrics_data = get_metrics(start_time, end_time, load_balancer_name)

    # Calculate uptime and downtime
    total_uptime, total_downtime = calculate_uptime_downtime(metrics_data)

    return {
        "statusCode": 200,
        "body": {
            "total_uptime_minutes": total_uptime,
            "total_downtime_minutes": total_downtime
        }
    }

# Test outside Lambda
if __name__ == "__main__":
    start_time = datetime.utcnow() - timedelta(days=30)
    end_time = datetime.utcnow()
    load_balancer_name = 'app/my-load-balancer/12345abcdef'

    metrics_data = get_metrics(start_time, end_time, load_balancer_name)
    total_uptime, total_downtime = calculate_uptime_downtime(metrics_data)

    print(f"Total Uptime: {total_uptime} minutes")
    print(f"Total Downtime: {total_downtime} minutes")
