import boto3
from datetime import datetime, timedelta

cloudwatch = boto3.client('cloudwatch')

def get_http_metrics(start_time, end_time, load_balancer_name):
    response = cloudwatch.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'http_2xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_Backend_2XX',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http_3xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_Backend_3XX',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http_4xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_Backend_4XX',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http_5xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_Backend_5XX',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        ScanBy='TimestampDescending'
    )
    return response

def lambda_handler(event, context):
    start_time = datetime.utcnow() - timedelta(days=14)
    end_time = datetime.utcnow()
    load_balancer_name = 'my-load-balancer'

    metrics_data = get_http_metrics(start_time, end_time, load_balancer_name)

    return {
        'statusCode': 200,
        'body': metrics_data
    }
