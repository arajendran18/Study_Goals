import boto3
from datetime import datetime, timedelta

cloudwatch = boto3.client('cloudwatch')

def get_http_metrics(start_time, end_time, load_balancer_name):
    response = cloudwatch.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'http2xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_ELB_2XX_Count',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http3xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_ELB_3XX_Count',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http4xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_ELB_4XX_Count',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            },
            {
                'Id': 'http5xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ApplicationELB',
                        'MetricName': 'HTTPCode_ELB_5XX_Count',
                        'Dimensions': [{'Name': 'LoadBalancer', 'Value': load_balancer_name}]
                    },
                    'Period': 3600,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        ScanBy='TimestampDescending'
    )
    return response

# Example usage
start_time = datetime.utcnow() - timedelta(days=30)  # Adjusted time range to 30 days
end_time = datetime.utcnow()
load_balancer_name = 'app/my-load-balancer/12345abcdef'  # Ensure the correct load balancer name

metrics_data = get_http_metrics(start_time, end_time, load_balancer_name)
print(metrics_data)
