import boto3
from datetime import datetime, timedelta

cloudwatch = boto3.client('cloudwatch')

def get_metric_data(start_time, end_time, load_balancer_name, metric_name):
    print(f"Querying {metric_name} for load balancer: {load_balancer_name}")
    print(f"Start Time: {start_time}, End Time: {end_time}")
    
    response = cloudwatch.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'metric_query',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ELB',
                        'MetricName': metric_name,
                        'Dimensions': [
                            {'Name': 'LoadBalancerName', 'Value': load_balancer_name}
                        ]
                    },
                    'Period': 300,  # Aggregated over 5 minutes
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        ScanBy='TimestampDescending'
    )
    
    print(f"CloudWatch Response: {response}")  # Debugging the entire response
    
    total_value = 0
    for result in response['MetricDataResults']:
        if result['Id'] == 'metric_query' and 'Values' in result:
            total_value += sum(result['Values'])
    
    print(f"Total {metric_name} Count: {total_value}")
    return total_value

def lambda_handler(event, context):
    # Shortened time range for testing (1 hour)
    start_time = datetime.utcnow() - timedelta(hours=1)
    end_time = datetime.utcnow()

    # Ensure this is your actual Classic ELB name
    load_balancer_name = 'my-classic-elb'  # Adjust as needed

    # Try 'RequestCount' temporarily to verify data retrieval
    metric_name = 'RequestCount'  # Swap back to 'HTTPCode_Backend_5XX' after testing

    metric_count = get_metric_data(start_time, end_time, load_balancer_name, metric_name)

    return {
        "statusCode": 200,
        "body": {
            f"{metric_name}_count": metric_count
        }
    }
