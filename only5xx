import boto3
from datetime import datetime, timedelta

cloudwatch = boto3.client('cloudwatch')

def get_backend_5xx_count(start_time, end_time, load_balancer_name):
    response = cloudwatch.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'backend5xx',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/ELB',
                        'MetricName': 'HTTPCode_Backend_5XX',
                        'Dimensions': [
                            {'Name': 'LoadBalancerName', 'Value': load_balancer_name}
                        ]
                    },
                    'Period': 300,  # 5-minute interval
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }
        ],
        StartTime=start_time,
        EndTime=end_time,
        ScanBy='TimestampDescending'
    )
    
    # Sum up the values for all the time periods
    total_5xx = 0
    for result in response['MetricDataResults']:
        if result['Id'] == 'backend5xx' and 'Values' in result:
            total_5xx += sum(result['Values'])

    return total_5xx

def lambda_handler(event, context):
    # Query over a 30-day time range
    start_time = datetime.utcnow() - timedelta(days=30)
    end_time = datetime.utcnow()

    # Replace with the actual Classic Load Balancer name
    load_balancer_name = 'my-classic-elb'  # Replace with your ELB name

    # Get the total 5XX count
    total_5xx_errors = get_backend_5xx_count(start_time, end_time, load_balancer_name)

    return {
        "statusCode": 200,
        "body": {
            "HTTPCode_Backend_5XX_Count": total_5xx_errors
        }
    }
