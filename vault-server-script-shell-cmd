#!/usr/bin/env bash
imds_token=$( curl -Ss -H "X-aws-ec2-metadata-token-ttl-seconds: 30" -XPUT 169.254.169.254/latest/api/token )
instance_id=$( curl -Ss -H "X-aws-ec2-metadata-token: $imds_token" 169.254.169.254/latest/meta-data/instance-id )
local_ipv4=$( curl -Ss -H "X-aws-ec2-metadata-token: $imds_token" 169.254.169.254/latest/meta-data/local-ipv4 )
curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
apt-get update -y
install_rc=1
while [[ $${install_rc} -ne 0 ]]; do
  sleep 10 # waiting for lock to release from 'apt-get update -y' command
  apt-get install -y vault-enterprise=${vault_version} awscli jq crudini
  install_rc=$?
done
echo "Configuring system time"
timedatectl set-timezone UTC
crudini --set /etc/systemd/journald.conf Journal SystemMaxUse 2G
systemctl restart systemd-journald
chmod 0755 /opt/vault/tls
aws s3 cp "${self_signed_cert_path}/rootCA.key" /opt/vault/tls/
aws s3 cp "${self_signed_cert_path}/rootCA.pem" /opt/vault/tls/
cp /opt/vault/tls/rootCA.pem /usr/local/share/ca-certificates/rootCA.crt
update-ca-certificates
openssl genrsa -out /opt/vault/tls/vault-key.pem 2048
cat << EOF > /opt/vault/tls/vault-csr-config.conf
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no
[req_distinguished_name]
C = CA
ST = British Columbia
L = Vancouver
O = Luluemon Athletica Canada, Inc.
CN = vault-node
[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = ${cluster_address}
DNS.2 = ${external_address}
DNS.3 = $instance_id
DNS.4 = vault-node
DNS.5 = localhost
IP.1 = $local_ipv4
IP.2 = 127.0.0.1
EOF
openssl req -new \
  -sha256 \
  -subj "/C=CA/ST=British Columbia/L=Vancouver/O=Lululemon Athletica Canada, Inc./CN=vault-node" \
  -key /opt/vault/tls/vault-key.pem \
  -out /opt/vault/tls/vault-cert.csr
openssl x509 -req -days 3650 -in /opt/vault/tls/vault-cert.csr -CA /opt/vault/tls/rootCA.pem -CAkey /opt/vault/tls/rootCA.key -CAcreateserial -out /opt/vault/tls/vault-cert.pem -extfile /opt/vault/tls/vault-csr-config.conf -extensions v3_req
openssl x509 -in /opt/vault/tls/vault-cert.pem -text -noout
vault-key.pem should be readable by the vault group only
touch /opt/vault/tls/vault-key.pem
chown root:vault /opt/vault/tls/vault-key.pem
chmod 0640 /opt/vault/tls/vault-key.pem
aws s3 cp "${license_path}" /opt/vault/vault.hclic
chown root:vault /opt/vault/vault.hclic
chmod 0640 /opt/vault/vault.hclic
# influxdata-archive_compat.key GPG Fingerprint: 9D539D90D3328DC7D6C8D3B9D8FF8E1F7DF8B07E
install_agent=1
while [[ $${install_agent} -ne 0 ]]; do
  sleep 10
  apt-get update
  curl -s https://repos.influxdata.com/influxdata-archive_compat.key > influxdata-archive_compat.key
  echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c && cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null
  echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list
  apt-get install telegraf
  install_agent=$?
done
cat << EOF > /etc/telegraf/telegraf.conf
# Global tags relate to and are available for use in Splunk searches
# Of particular note are the index tag, which is required to match the
# configured metrics index name and the cluster tag which should match the
# value of Vault's cluster_name configuration option value.
[global_tags]
  index="vault-metrics"
  datacenter = "${region}"
  role       = "vault-server"
  cluster    = "${name}-vault"
# Agent options around collection interval, sizes, jitter and so on
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
# An input plugin that listens on UDP/8125 for statsd compatible telemetry
# messages using Datadog extensions which are emitted by Vault
[[inputs.statsd]]
  protocol = "udp"
  service_address = ":8125"
  metric_separator = "."
  datadog_extensions = true
# An output plugin that can transmit metrics over HTTP to Splunk
# You must specify a valid Splunk HEC token as the Authorization value
[[outputs.http]]
  url = "https://http-inputs-lululemon.splunkcloud.com:443/services/collector"
  data_format="splunkmetric"
  splunkmetric_hec_routing=true
  [outputs.http.headers]
    Content-Type = "application/json"
    Authorization = "Splunk $(aws secretsmanager get-secret-value --region ${region} --secret-id splunk_hec_token | jq --raw-output '.SecretString' | jq -r .splunk_hec_token)"
# Read metrics about cpu usage using default configuration values
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
# Read metrics about memory usage
[[inputs.mem]]
  # No configuration required
# Read metrics about swap memory usage
[[inputs.swap]]
  # No configuration required
# Read metrics about disk usage using default configuration values
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  ## mount_points = ["/"]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
[[inputs.diskio]]
  # devices = ["sda", "sdb"]
  # skip_serial_number = false
[[inputs.kernel]]
  # No configuration required
[[inputs.linux_sysctl_fs]]
  # No configuration required
[[inputs.net]]
  # Specify an interface or all
  # interfaces = ["enp0s*"]
[[inputs.netstat]]
  # No configuration required
[[inputs.processes]]
  # No configuration required
[[inputs.procstat]]
 pattern = "(vault)"
[[inputs.system]]
  # No configuration required
EOF
systemctl start telegraf
mkdir -p /etc/vault/plugins;wget -P /etc/vault/plugins "https://releases.hashicorp.com/vault-plugin-database-oracle/0.9.0/vault-plugin-database-oracle_0.9.0_linux_amd64.zip";unzip /etc/vault/plugins/vault-plugin-database-oracle_0.9.0_linux_amd64.zip -d /etc/vault/plugins;chown -R vault:vault /etc/vault/*;chown -R vault:vault /etc/vault/plugins/*;chmod 777 /etc/vault/plugins/*;mkdir /opt/oracle;wget -P /opt/oracle "https://download.oracle.com/otn_software/linux/instantclient/1922000/instantclient-basic-linux.x64-19.22.0.0.0dbru.zip";unzip /opt/oracle/instantclient-basic-linux.x64-19.22.0.0.0dbru.zip -d /opt/oracle;apt-get install libaio1
sh -c "echo /opt/oracle/instantclient_19_22 > /etc/ld.so.conf.d/oracle-instantclient.conf";ldconfig;export LD_LIBRARY_PATH=/opt/oracle/instantclient_19_22:$LD_LIBRARY_PATH
wget -O splunkforwarder-9.0.5-e9494146ae5c-Linux-x86_64.tgz "https://download.splunk.com/products/universalforwarder/releases/9.0.5/linux/splunkforwarder-9.0.5-e9494146ae5c-Linux-x86_64.tgz"
tar -xvzf splunkforwarder-9.0.5-e9494146ae5c-Linux-x86_64.tgz -C /opt
/opt/splunkforwarder/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd $(aws secretsmanager get-secret-value --region ${region} --secret-id splunk_admin_password | jq --raw-output '.SecretString' | jq -r .splunk_admin_password)
aws s3 cp s3://splunk-prd-certs/splunkclouduf.spl /opt/
/opt/splunkforwarder/bin/splunk install app /opt/splunkclouduf.spl -auth admin:$(aws secretsmanager get-secret-value --region ${region} --secret-id splunk_admin_password | jq --raw-output '.SecretString' | jq -r .splunk_admin_password)
mkdir -p /opt/splunkforwarder/etc/apps/lll_vault/default
touch /opt/splunkforwarder/etc/apps/lll_vault/default/inputs.conf
cat << EOF > /opt/splunkforwarder/etc/apps/lll_vault/default/inputs.conf
[default]
host = cloud-infra-vault-${name}-$instance_id
[monitor:///var/log/vault/audit_to_splunk.log*]
index=vault-audit
sourcetype=hashicorp_vault_audit_log
EOF
cat << EOF > /etc/vault.d/vault.hcl
plugin_directory = "/etc/vault/plugins"
disable_performance_standby = false
ui = true
disable_mlock = true
storage "raft" {
  path    = "/opt/vault/data"
  node_id = "$instance_id"
  retry_join {
    auto_join = "provider=aws region=${region} tag_key=${name}-role tag_value=server"
    auto_join_scheme = "https"
    leader_tls_servername = "vault-node"
    leader_ca_cert_file = "/opt/vault/tls/rootCA.pem"
    leader_client_cert_file = "/opt/vault/tls/vault-cert.pem"
    leader_client_key_file = "/opt/vault/tls/vault-key.pem"
  }
}
cluster_addr = "https://$local_ipv4:8201"
api_addr = "https://${cluster_address}:8200"
listener "tcp" {
  address                          = "0.0.0.0:8200"
  x_forwarded_for_authorized_addrs = ["${vpc_cidr}"]
  tls_disable                      = false
  tls_cert_file                    = "/opt/vault/tls/vault-cert.pem"
  tls_key_file                     = "/opt/vault/tls/vault-key.pem"
  tls_client_ca_file               = "/opt/vault/tls/rootCA.pem"
}
seal "awskms" {
  region     = "${region}"
  kms_key_id = "${kms_key_arn}"
}
cluster_name = "${name}-vault"
telemetry {
  dogstatsd_addr = "localhost:8125"
  enable_hostname_label = true
  prometheus_retention_time = "30s"
  disable_hostname = true
}
reporting {
    license {
        enabled = false
   }
}
license_path = "/opt/vault/vault.hclic"
EOF
chown root:root /etc/vault.d
chown root:vault /etc/vault.d/vault.hcl
chmod 640 /etc/vault.d/vault.hcl
mkdir -p /var/log/vault
chown vault:vault /var/log/vault
crudini --set /usr/lib/systemd/system/vault.service Service LogsDirectory /var/log/vault
crudini --set /usr/lib/systemd/system/vault.service Service StandardOutput file:/var/log/vault/messages.log
crudini --set /usr/lib/systemd/system/vault.service Service StandardError file:/var/log/vault/debug.log
systemctl daemon-reload
systemctl enable vault
systemctl start vault
systemctl restart telegraf
/opt/splunkforwarder/bin/splunk restart
echo "Setup Vault profile"
cat <<EOF | sudo tee /etc/profile.d/vault.sh
export VAULT_CACERT=/opt/vault/tls/rootCA.pem
EOF
echo export VAULT_CACERT=/opt/vault/tls/rootCA.pem >> /root/.profile
mkdir /etc/logrotate.hourly.d
cat << EOF | sudo tee /etc/logrotate.hourly.conf
include /etc/logrotate.hourly.d
EOF
chmod 644 /etc/logrotate.hourly.conf
cat << EOF | sudo tee /etc/cron.hourly/logrotate
#!/bin/bash
test -x /usr/sbin/logrotate || exit 0
/usr/sbin/logrotate /etc/logrotate.hourly.conf
EOF
chmod 775 /etc/cron.hourly/logrotate
cat <<EOF | sudo tee /etc/logrotate.hourly.d/vault
/var/log/vault/*.log {
    missingok
    ifempty
    dateext
    dateformat -%Y%m%d%H
    rotate 20
    size 100M
    maxsize 100M
    create 0664 vault bin
    postrotate
      /usr/bin/systemctl reload vault 2> /dev/null || true
    endscript
}
EOF
systemctl restart logrotate
# Install the Amazon CloudWatch Logs Agent
curl https://amazoncloudwatch-agent.s3.amazonaws.com/debian/amd64/latest/amazon-cloudwatch-agent.deb -o /tmp/amazon-cloudwatch-agent.deb
dpkg -i -E /tmp/amazon-cloudwatch-agent.deb
cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/config.json
{
        "agent": {
                "metrics_collection_interval": 60,
                "run_as_user": "root"
        },
        "logs": {
                "logs_collected": {
                        "files": {
                                "collect_list": [
                                        {
                                                "file_path": "/var/log/syslog",
                                                "log_group_name": "${syslog_lg_name}",
                                                "log_stream_name": "{instance_id}"
                                        },
                                        {
                                                "file_path": "/var/log/vault/messages.log",
                                                "log_group_name": "${messages_lg_name}",
                                                "log_stream_name": "{instance_id}"
                                        },
                                        {
                                                "file_path": "/var/log/vault/debug.log",
                                                "log_group_name": "${debug_lg_name}",
                                                "log_stream_name": "{instance_id}"
                                        },
                                        {
                                                "file_path": "/var/log/vault/audit.log",
                                                "log_group_name": "${audit_lg_name}",
                                                "log_stream_name": "{instance_id}"
                                        }
                                ]
                        }
                }
        },
        "metrics": {
                "append_dimensions": {
                        "InstanceId": "\$${aws:InstanceId}"
                },
                "metrics_collected": {
                        "cpu": {
                                "measurement": [
                                        "cpu_usage_idle",
                                        "cpu_usage_iowait",
                                        "cpu_usage_user",
                                        "cpu_usage_system"
                                ],
                                "metrics_collection_interval": 60,
                                "totalcpu": true,
                                "resources": [
                                        "*"
                                ]
                        },
                        "disk": {
                                "measurement": [
                                        "used_percent",
                                        "used",
                                        "free",
                                        "inodes_free"
                                ],
                                "metrics_collection_interval": 60,
                                "resources": [
                                        "*"
                                ]
                        },
                        "diskio": {
                                "measurement": [
                                        "io_time"
                                ],
                                "metrics_collection_interval": 60,
                                "resources": [
                                        "*"
                                ]
                        },
                        "mem": {
                                "measurement": [
                                        "mem_used_percent"
                                ],
                                "metrics_collection_interval": 60
                        },
                        "swap": {
                                "measurement": [
                                        "swap_used_percent"
                                ],
                                "metrics_collection_interval": 60
                        }
                }
        }
}
EOF
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file://opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/config.json
