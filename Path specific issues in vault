### **Runbook: Resolving Vault Path-Specific Issues**

---

#### **Title:**  
Resolving Path-Specific Issues in HashiCorp Vault  

---

#### **Purpose:**  
This runbook provides step-by-step instructions to resolve common Vault issues related to access denial, missing paths, and restricted permissions for specific paths.  

---

#### **Scope:**  
Applies to administrators managing HashiCorp Vault via the UI, CLI, or API.

---

#### **Prerequisites:**  
1. Access to Vault with appropriate administrative privileges.  
2. The Vault token with `read`, `update`, and `list` capabilities for policies and secrets management.  
3. Tools to access Vault:
   - UI access via a browser.
   - CLI installed and configured with Vault endpoint.
   - API tools like `curl` or `Postman`.  

---

### **1. Issue: Access Denied for Specific Paths While Others Work**

#### **Description:**  
A user receives an "access denied" error when accessing specific paths while having access to others.  

---

#### **Resolution Steps:**  

##### **Using Vault UI:**  
1. Go to **Access Policies** in the Vault UI.  
2. Locate the policy attached to the user or team.  
3. Confirm that the path has the required capabilities (`read`, `list`, etc.).  
4. If not, add the path:
   - Example:  
     ```
     path "secret/data/specific-path/*" {
       capabilities = ["read", "list"]
     }
     ```
5. Save and apply the changes.  

##### **Using Vault CLI:**  
1. Retrieve the policies for the role:
   ```bash
   vault read auth/<auth-method>/role/<role-name>
   ```
2. Inspect the policy for required path permissions:
   ```bash
   vault policy read <policy-name>
   ```
3. Update the policy if needed:
   ```bash
   vault policy write <policy-name> <updated-policy-file.hcl>
   ```

##### **Using Vault API:**  
1. Check the policies associated with the role:
   ```bash
   curl -s --header "X-Vault-Token: <token>" http://<vault-url>:8200/v1/auth/<auth-method>/role/<role-name>
   ```
2. Review the policy:
   ```bash
   curl -s --header "X-Vault-Token: <token>" http://<vault-url>:8200/v1/sys/policies/acl/<policy-name>
   ```
3. Update the policy if required:
   ```bash
   curl --header "X-Vault-Token: <token>" \
        --request PUT \
        --data @policy.json \
        http://<vault-url>:8200/v1/sys/policies/acl/<policy-name>
   ```

---

### **2. Issue: Path Not Found in Vault**

#### **Description:**  
A user encounters "path not found" when attempting to access a secret or secrets engine.  

---

#### **Resolution Steps:**  

##### **Using Vault UI:**  
1. Navigate to **Secrets Engines** in the UI.  
2. Verify if the required secrets engine is mounted.  
3. If not, mount the engine with the appropriate path and type.  

##### **Using Vault CLI:**  
1. List all mounted secrets engines:
   ```bash
   vault secrets list
   ```
2. If the path is missing, mount the engine:
   ```bash
   vault secrets enable -path=<path> <engine-type>
   ```
   Example:
   ```bash
   vault secrets enable -path=secret kv
   ```

##### **Using Vault API:**  
1. Retrieve the list of mounts:
   ```bash
   curl -s --header "X-Vault-Token: <token>" http://<vault-url>:8200/v1/sys/mounts
   ```
2. Mount the secrets engine:
   ```bash
   curl --header "X-Vault-Token: <token>" \
        --request POST \
        --data '{"type": "kv", "path": "<mount-path>"}' \
        http://<vault-url>:8200/v1/sys/mounts/<mount-path>
   ```

---

### **3. Issue: User or Team Can List Secrets but Cannot Read Them**

#### **Description:**  
Users can list secrets under a specific path but receive "permission denied" errors when attempting to read them.  

---

#### **Resolution Steps:**  

##### **Using Vault UI:**  
1. Go to **Access Policies** in the UI.  
2. Confirm the policy includes `read` capabilities for the required paths.  
   - Example:
     ```
     path "secret/data/specific-path/*" {
       capabilities = ["read", "list"]
     }
     ```
3. Add or update the policy and save.  

##### **Using Vault CLI:**  
1. Verify policies for the user or team:
   ```bash
   vault read auth/<auth-method>/role/<role-name>
   ```
2. Check the policy details:
   ```bash
   vault policy read <policy-name>
   ```
3. Update the policy if needed:
   ```bash
   vault policy write <policy-name> <updated-policy-file.hcl>
   ```

##### **Using Vault API:**  
1. Retrieve the policy details:
   ```bash
   curl -s --header "X-Vault-Token: <token>" http://<vault-url>:8200/v1/sys/policies/acl/<policy-name>
   ```
2. Add `read` capability to the required paths and update the policy:
   ```bash
   curl --header "X-Vault-Token: <token>" \
        --request PUT \
        --data @policy.json \
        http://<vault-url>:8200/v1/sys/policies/acl/<policy-name>
   ```

---

#### **Validation:**  
1. Test access to the specific path using the Vault token associated with the user/team.  
2. Confirm that users can list and read secrets or access the specified path as required.  

---

#### **Escalation:**  
If issues persist after applying these steps, escalate to the Vault administrator or consult HashiCorp support.  

---

#### **Notes:**  
- Keep logs of changes made to policies for auditing.  
- Regularly review and optimize policies to ensure security and compliance.  

---
