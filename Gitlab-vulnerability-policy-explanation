This **GitLab Vulnerability Management Policy** is designed to **auto-resolve vulnerabilities** that are **no longer detected** on the **default branch** of the repository.  

---

### **Breaking Down the Policy Configuration**  

1. **Policy Name & Description**  
   - The policy is named **"lululemon Vulnerability Management Policy"**.  
   - It is intended to **automatically resolve vulnerabilities** that are **no longer found** on the default branch.  

2. **Policy Activation**  
   - `enabled: true` ‚Üí The policy is **active**.  

3. **Rules Section**  
   ```yaml
   rules:
     - type: no_longer_detected
       scanners: []
       severity_levels: []
   ```
   - The rule type **`no_longer_detected`** means it will **resolve vulnerabilities that were previously reported but are no longer present** in the latest scan on the default branch.  
   - `scanners: []` ‚Üí No specific security scanners are mentioned, meaning this applies to **all available security scans** (SAST, DAST, Dependency Scanning, etc.).  
   - `severity_levels: []` ‚Üí No severity filters are defined, so this applies to **all severities (Critical, High, Medium, Low, etc.)**.  

4. **Actions Section**  
   ```yaml
   actions:
     - type: auto_resolve
   ```
   - This **automatically marks vulnerabilities as resolved** when they are no longer detected in scans.  

5. **Policy Scope**  
   ```yaml
   policy_scope:
     projects:
       excluding: []
   ```
   - This policy applies to **all projects** within the **lululemon GitLab organization** because no projects are excluded.  

---

### **What Does This Policy Do?**  
‚úî **Automatically resolves vulnerabilities** that are **no longer detected** on the default branch.  
‚úî **Applies to all security scans** (SAST, DAST, Dependency Scanning, etc.).  
‚úî **Works across all projects** under the lululemon GitLab organization.  
‚úî **Does not filter by severity**‚Äîapplies to all vulnerabilities.  
‚úî **Ensures vulnerability reports remain updated** by removing resolved issues.  

---

### **Example Scenario**  

1Ô∏è‚É£ A security scan detects a **High Severity SQL Injection** vulnerability in `main` and raises an alert.  
2Ô∏è‚É£ A developer fixes the issue and merges the fix to `main`.  
3Ô∏è‚É£ The next scan runs and **no longer detects** the vulnerability.  
4Ô∏è‚É£ This **policy automatically marks the vulnerability as resolved**, removing it from the vulnerability report.  

========================================================================================================================================================
### **GitLab Secret Policy (Approval Policy) ‚Äì What It Does**  

This **Secret Policy** ensures that **critical secret vulnerabilities** (like exposed API keys or credentials) are properly reviewed before merging code into **protected** or **default** branches. It **blocks a merge request** under certain conditions and requires **manual approval** by specific users.

---

### **Policy Breakdown**  

#### ‚úÖ **Policy Activation**  
```yaml
enabled: true
```
- **This policy is active and enforced.**

---

#### üö® **When Does the Policy Block a Merge Request?**  
The policy blocks a merge request if **one or both** of the following criteria are met:  
1Ô∏è‚É£ **Secret detection job is missing in the pipeline.**  
2Ô∏è‚É£ **A new "Critical" severity secret vulnerability (status: `new_needs_triage`) is found in the latest pipeline.**  

---

#### ‚ö° **Approval Actions Required**  
```yaml
actions:
  - type: require_approval
    approvals_required: 1
    user_approvers_ids:
      - 8633806
      - 11168261
      - 11223317
      - 11960326
      - 18306956
```
- If the policy blocks a merge request, **at least one approval** is required.  
- Only the **listed approvers** can approve:  
  - **Users with IDs** `8633806`, `11168261`, `11223317`, `11960326`, `18306956`.  

---

#### üîç **Approval Rules Based on Secret Detection Scan**  
```yaml
rules:
  - type: scan_finding
    scanners:
      - secret_detection
    vulnerabilities_allowed: 0
    severity_levels:
      - critical
    vulnerability_states:
      - new_needs_triage
    branch_type: protected
```
```yaml
  - type: scan_finding
    scanners:
      - secret_detection
    vulnerabilities_allowed: 0
    severity_levels:
      - critical
    vulnerability_states:
      - new_needs_triage
    branch_type: default
```
- **Scans for secrets using `secret_detection`.**  
- **Blocks the merge request if any new `critical` secret vulnerability** is found.  
- **Applies to**:  
  - **Protected branches** (e.g., `main`, `develop`).  
  - **Default branch** (the primary branch of the repository).  
- **No critical secret vulnerabilities are allowed (`vulnerabilities_allowed: 0`).**  
- The policy applies only to vulnerabilities in the **"new_needs_triage"** state, meaning newly detected issues that haven't been reviewed yet.

---

#### üõ†Ô∏è **Approval Settings**  
```yaml
approval_settings:
  block_branch_modification: false
  prevent_pushing_and_force_pushing: false
  prevent_approval_by_author: false
  prevent_approval_by_commit_author: false
  remove_approvals_with_new_commit: false
  require_password_to_approve: false
```
- **Approval rules allow flexibility:**  
  - **Pushing and force-pushing are allowed.**  
  - **Authors can approve their own MRs.**  
  - **Approval is not removed if a new commit is pushed.**  
  - **No password is required to approve.**  

---

#### üìå **Scope of Policy Enforcement**  
```yaml
policy_scope:
  compliance_frameworks:
    - id: 1016749
    - id: 1017692
    - id: 1017691
    - id: 1019721
```
- The policy applies only to projects under specific **compliance frameworks** (identified by their IDs).  

---

### **üîç Example Scenarios**  

‚úÖ **Example 1: Merge Allowed**  
- A developer submits a merge request to `main`.  
- The pipeline **includes** the secret detection job.  
- No **new critical secrets** are found in the latest scan.  
- ‚úÖ **Merge proceeds without approval.**  

üö´ **Example 2: Merge Blocked (Missing Secret Detection Job)**  
- A developer submits a merge request.  
- The pipeline **does not include** a **secret detection job**.  
- üö´ **Merge request is blocked and requires manual approval.**  

üö´ **Example 3: Merge Blocked (Critical Secret Found)**  
- A new API key is accidentally pushed in the code.  
- The latest scan detects this **as a new critical secret vulnerability**.  
- üö´ **Merge request is blocked until an approver reviews and approves.**  

---

### **üîπ Key Takeaways**  
‚úî **Blocks merge requests if secret scanning is missing or a critical secret is found.**  
‚úî **Requires manual approval from specific users in such cases.**  
‚úî **Applies only to protected and default branches.**  
‚úî **Gives flexibility in the approval process.**  

=============================================================================================================================================================

### **Breakdown of the SAST Policy** üõ†Ô∏è  

This **SAST Policy** is designed to **block merge requests (MRs) if new critical SAST vulnerabilities are found**. Here's a detailed breakdown:

---

### **1Ô∏è‚É£ General Policy Purpose**  
- **Name:** `SAST POLICY - PASSIVE`  
- **Goal:** Blocks **new critical vulnerabilities** detected by **SAST** scans before merging.  
- **Enabled:** ‚úÖ **Yes** (enforced in the pipeline).  

---

### **2Ô∏è‚É£ Actions Taken**
#### ‚úÖ **Requires Approval Before Merge**
- If a **new critical vulnerability** is found, **one approval** is required before merging.  
- **Approvers:**  
  - Users with IDs:
    - **8633806**
    - **11168261**
    - **11223317**
    - **11960326**
    - **18306956**

#### ü§ñ **Sends Bot Message**
- A bot message is sent when a new SAST vulnerability is detected.  

---

### **3Ô∏è‚É£ When Does the Policy Trigger?**
- **Scanner Used:** `sast`  
- **Only Critical Severity Vulnerabilities** are blocked.  
- **Vulnerability States Considered:**  
  - `new_needs_triage` ‚Üí Newly found, needs review.  
  - `new_dismissed` ‚Üí Was dismissed but reappeared.  
  - `detected` ‚Üí Found in the latest scan.  
  - `confirmed` ‚Üí Verified as a real security issue.  
- **Allowed Vulnerabilities:** `10,000` (‚ö†Ô∏è This setting should be `0` to strictly enforce blocking).  

---

### **4Ô∏è‚É£ Applies to These Branches**
- **`default` branches** (e.g., `main`, `master`).  
- **`protected` branches** (critical branches where code must be reviewed).  

---

### **5Ô∏è‚É£ Additional Approval Rules**
- **Does NOT block:**  
  - **Branch modifications** (`block_branch_modification: false`)  
  - **Group-level branch modifications** (`block_group_branch_modification: false`)  
  - **Pushing or force-pushing** (`prevent_pushing_and_force_pushing: false`)  
  - **Approval by author/commit author** (`prevent_approval_by_author: false`, `prevent_approval_by_commit_author: false`)  
  - **Approval reset on new commits** (`remove_approvals_with_new_commit: false`)  
  - **Password requirement for approval** (`require_password_to_approve: false`)  

---

### **6Ô∏è‚É£ Compliance Scope**
- Applied to **specific compliance frameworks**, ensuring secure coding practices are followed.  
- Compliance IDs:  
  - **1020222, 1020223, 1020226, 1019721, 1019722, 1019971, 1016749, 1017691, 1017692**  

---

### **7Ô∏è‚É£ Fallback Behavior**
- **`fail: closed`** ‚Üí If the policy **fails to execute**, the **merge request is blocked**.  

---

## **üîç Summary**
üö® **This policy ensures that any new critical vulnerabilities found by SAST scans must be manually reviewed before merging into protected branches.**  

üí° **Potential Improvements:**  
1Ô∏è‚É£ Set `vulnerabilities_allowed: 0` instead of `10,000` to **strictly block critical vulnerabilities**.  
2Ô∏è‚É£ Consider adding **`high` severity** to also block high-risk vulnerabilities.  
3Ô∏è‚É£ Enforce `remove_approvals_with_new_commit: true` so new commits require re-approval.  

=========================================================================================================================================================
### **Breakdown of the Legacy Secret Policy** üîë  

This **Legacy Secret Policy** is designed to **block merge requests (MRs) if secret detection scans are missing or if new critical secrets are found**.  

---

## **1Ô∏è‚É£ General Policy Purpose**
- **Name:** `LEGACY SECRET POLICY - PASSIVE`  
- **Goal:**  
  - **Blocks MRs if secret detection job didn‚Äôt run.**  
  - **Blocks MRs if >10,000 critical secrets** (marked as `detected` or `confirmed`) exist.  
- **Enabled:** ‚úÖ **Yes** (actively enforced).  

---

## **2Ô∏è‚É£ Actions Taken**
#### ‚úÖ **Requires Approval Before Merge**
- If the **secret detection scan** was **skipped** or if **too many critical secrets** exist, **one approval** is required.  
- **Approvers:**  
  - Users with IDs:  
    - **8633806**  
    - **11168261**  
    - **11223317**  
    - **11960326**  
    - **18306956**  

#### ü§ñ **Sends Bot Message**
- A bot message is sent when a new critical secret is found or if the secret detection scan was skipped.  

---

## **3Ô∏è‚É£ When Does the Policy Trigger?**
- **Scanner Used:** `secret_detection`  
- **Only Critical Severity Secrets** are blocked.  
- **Vulnerability States Considered:**  
  - `detected` ‚Üí New secret found.  
  - `confirmed` ‚Üí Secret has been validated as real.  
- **Allowed Secrets:** `10,000` (‚ö†Ô∏è Should be **0** to strictly enforce blocking).  

---

## **4Ô∏è‚É£ Applies to These Branches**
- **`default` branches** (e.g., `main`, `master`).  
- **`protected` branches** (critical branches where code must be reviewed).  

---

## **5Ô∏è‚É£ Additional Approval Rules**
- **Does NOT block:**  
  - **Branch modifications** (`block_branch_modification: false`)  
  - **Group-level branch modifications** (`block_group_branch_modification: false`)  
  - **Pushing or force-pushing** (`prevent_pushing_and_force_pushing: false`)  
  - **Approval by author/commit author** (`prevent_approval_by_author: false`, `prevent_approval_by_commit_author: false`)  
  - **Approval reset on new commits** (`remove_approvals_with_new_commit: false`)  
  - **Password requirement for approval** (`require_password_to_approve: false`)  

---

## **6Ô∏è‚É£ Compliance Scope**
- Applied to **specific compliance frameworks**, ensuring secure coding practices are followed.  
- Compliance IDs:  
  - **1020222, 1020223, 1020226, 1019721, 1019722, 1019971, 1019645, 1016749, 1017691, 1017692**  

---

## **7Ô∏è‚É£ Fallback Behavior**
- **`fail: closed`** ‚Üí If the policy **fails to execute**, the **merge request is blocked**.  

---

## **üîç Major Differences from the SAST Policy**
| **Aspect**           | **SAST Policy** üöÄ | **Legacy Secret Policy** üîë |
|---------------------|----------------|------------------|
| **Scanner Used** | `sast` | `secret_detection` |
| **Trigger Conditions** | Blocks if new **critical SAST vulnerabilities** are found. | Blocks if **critical secrets** are found **or** if secret detection scan is missing. |
| **Branch Scope** | Applies to `default` and `protected` branches. | Applies to `default` and `protected` branches. |
| **Vulnerability Types** | **Code security issues** (e.g., SQL injection, XSS). | **Leaked credentials/secrets** (e.g., API keys, passwords). |
| **Vulnerabilities Allowed** | 10,000 (‚ö†Ô∏è Should be **0**). | 10,000 (‚ö†Ô∏è Should be **0**). |
| **Approval Requirement** | Blocks MR if critical SAST issues are found. | Blocks MR if **critical secrets** are found **or** the scan is missing. |

---

## **üîç Summary**
üö® **This policy ensures that MRs cannot be merged if secret detection didn‚Äôt run or if new critical secrets are found.**  

üí° **Potential Improvements:**  
1Ô∏è‚É£ Set `vulnerabilities_allowed: 0` instead of `10,000` for **strict enforcement**.  
2Ô∏è‚É£ Enforce `remove_approvals_with_new_commit: true` to **reset approvals when new commits are pushed**.  
3Ô∏è‚É£ Add `high` severity to also block **high-risk secret exposures**.  

=======================================================================================================================================================================

Here‚Äôs the breakdown for the **CICD Policy** in the same detailed format:  

---

### **Breakdown of the CICD Policy** üöÄ  

This **CICD Policy** ensures that Terraform code follows best practices by enforcing **formatting, validation, and linting checks** before deployment.  

---

## **1Ô∏è‚É£ General Policy Purpose**
- **Name:** `CICD Policy`  
- **Goal:**  
  - Ensures **Terraform code is formatted correctly**.  
  - Validates **Terraform configuration** before deployment.  
  - Runs **linting checks** to detect potential misconfigurations.  
- **Enabled:** ‚úÖ **Yes** (actively enforced in the CI/CD pipeline).  

---

## **2Ô∏è‚É£ Stages in the Pipeline**
The pipeline runs in a specific sequence:  

| **Stage Name** üîÑ | **Purpose** üõ†Ô∏è |
|------------------|------------------|
| **Terraform_format** | Checks Terraform formatting and validates syntax. |
| **Lint** | Runs TFLint to detect potential issues. |
| **Test** | (Not explicitly defined in the given policy but assumed to be for functional tests). |

---

## **3Ô∏è‚É£ Actions Taken**
### ‚úÖ **Terraform Formatting & Validation**
- **Stage:** `Terraform_format`  
- **Docker Image Used:** `hashicorp/terraform:0.15.5`  
- **Commands Executed:**  
  - `terraform init -backend=false` ‚Üí Initializes Terraform without backend state.  
  - `terraform validate` ‚Üí Validates the Terraform configuration syntax.  
  - `terraform fmt -recursive` ‚Üí Ensures Terraform code follows proper formatting.  
  - `terraform fmt -recursive -list=true -write=false -diff=true -check=true` ‚Üí Checks for any formatting issues **without making changes**.  

---

### ‚úÖ **Linting with TFLint**
- **Stage:** `lint`  
- **Docker Image Used:** `wata727/tflint`  
- **Commands Executed:**  
  - `tflint .` ‚Üí Runs Terraform linting to detect potential errors.  
- **Failure Handling:**  
  - `allow_failure: true` ‚Üí **If TFLint fails, the pipeline will continue**, but warnings will be displayed.  

---

## **4Ô∏è‚É£ Key Features & Rules**
- **Uses Official Terraform and TFLint Images** ‚Üí Ensures consistency across environments.  
- **Validates Terraform Code Before Deployment** ‚Üí Prevents misconfigurations.  
- **Automatically Detects Formatting Issues** ‚Üí Enforces best practices for code structure.  
- **Allows Linting to Fail Without Stopping the Pipeline** ‚Üí Developers can merge changes even if minor warnings exist.  

---

## **üîç Summary**
üö® **This policy ensures that Terraform code follows best practices before deployment.**  

üí° **Potential Improvements:**  
1Ô∏è‚É£ Set `allow_failure: false` in the linting stage to **block merges if issues are detected**.  
2Ô∏è‚É£ Add a `test` stage to ensure Terraform plans can be applied without errors.  
3Ô∏è‚É£ Use a newer Terraform image (0.15.5 is outdated) for better support and security updates.  

============================================================================================================================================================
